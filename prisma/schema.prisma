generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]
  messages      Message[]
}

enum Role {
  ADMIN
  FARMER
  CUSTOMER
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  farmerId    String
  farmer      User     @relation(fields: [farmerId], references: [id])
  orders      Order[]
}

model Order {
  id        String   @id @default(cuid())
  quantity  Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id])
  receiverId String
}